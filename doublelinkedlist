public class DoublyLinkedList : SinglyLinkedList
{
    private class ListNode
    {
        public object Value;
        public ListNode Next;
        public ListNode Previous;

        public ListNode(object value)
        {
            Value = value;
            Next = null;
            Previous = null;
        }
    }

    private ListNode _head;
    private ListNode _tail;
    private int _count;

    public DoublyLinkedList() : base()
    {
        _head = null;
        _tail = null;
        _count = 0;
    }

    public new int Count => _count;

    public void Add(object item)
    {
        ListNode newNode = new ListNode(item);
        if (_head == null)
        {
            _head = newNode;
            _tail = newNode;
        }
        else
        {
            newNode.Previous = _tail;
            _tail.Next = newNode;
            _tail = newNode;
        }
        _count++;
    }

    public void AddFirst(object item)
    {
        ListNode newNode = new ListNode(item);
        if (_head == null)
        {
            _head = newNode;
            _tail = newNode;
        }
        else
        {
            newNode.Next = _head;
            _head.Previous = newNode;
            _head = newNode;
        }
        _count++;
    }

    public void Remove(object item)
    {
        ListNode current = _head;
        while (current != null)
        {
            if (Equals(current.Value, item))
            {
                if (current.Previous == null) // first node
                {
                    _head = current.Next;
                    if (_head != null)
                        _head.Previous = null;
                }
                else if (current.Next == null) // last node
                {
                    _tail = current.Previous;
                    if (_tail != null)
                        _tail.Next = null;
                }
                else // middle node
                {
                    current.Previous.Next = current.Next;
                    current.Next.Previous = current.Previous;
                }
                _count--;
                return;
            }
            current = current.Next;
        }
    }

    public void RemoveFirst()
    {
        if (_head == null)
            return;

        if (_head.Next == null)
        {
            _head = null;
            _tail = null;
        }
        else
        {
            _head = _head.Next;
            _head.Previous = null;
        }
        _count--;
    }

    public void RemoveLast()
    {
        if (_tail == null)
            return;

        if (_tail.Previous == null)
        {
            _head = null;
            _tail = null;
        }
        else
        {
            _tail = _tail.Previous;
            _tail.Next = null;
        }
        _count--;
    }

    public bool Contains(object item)
    {
        ListNode current = _head;
        while (current != null)
        {
            if (Equals(current.Value, item))
                return true;
            current = current.Next;
        }
        return false;
    }

    public object[] ToArray()
    {
        object[] array = new object[_count];
        ListNode current = _head;
        int index = 0;
        while (current != null)
        {
            array[index++] = current.Value;
            current = current.Next;
        }
        return array;
    }
}
