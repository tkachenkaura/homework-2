public class Stack
{
    private class StackNode
    {
        public object Value;
        public StackNode Next;

        public StackNode(object value)
        {
            Value = value;
            Next = null;
        }
    }

    private StackNode _head;
    private int _count;

    public Stack()
    {
        _head = null;
        _count = 0;
    }

    public int Count => _count;

    public void Push(object item)
    {
        StackNode newNode = new StackNode(item);
        newNode.Next = _head;
        _head = newNode;
        _count++;
    }

    public object Pop()
    {
        if (_head == null)
            throw new InvalidOperationException("Stack is empty");

        object value = _head.Value;
        _head = _head.Next;
        _count--;
        return value;
    }

    public object Peek()
    {
        if (_head == null)
            throw new InvalidOperationException("Stack is empty");

        return _head.Value;
    }

    public void Clear()
    {
        _head = null;
        _count = 0;
    }

    public bool Contains(object item)
    {
        StackNode current = _head;
        while (current != null)
        {
            if (Equals(current.Value, item))
                return true;
            current = current.Next;
        }
        return false;
    }

    public object[] ToArray()
    {
        object[] array = new object[_count];
        StackNode current = _head;
        int index = 0;
        while (current != null)
        {
            array[index++] = current.Value;
            current = current.Next;
        }
        return array;
    }
}
