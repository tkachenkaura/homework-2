public class BinarySearchTree
{
    private class TreeNode
    {
        public int Value;
        public TreeNode Left;
        public TreeNode Right;

        public TreeNode(int value)
        {
            Value = value;
            Left = null;
            Right = null;
        }
    }

    private TreeNode _root;
    private int _count;

    public BinarySearchTree()
    {
        _root = null;
        _count = 0;
    }

    public int Count => _count;

    public void Add(int value)
    {
        _root = AddRecursive(_root, value);
    }

    private TreeNode AddRecursive(TreeNode node, int value)
    {
        if (node == null)
        {
            _count++;
            return new TreeNode(value);
        }

        if (value < node.Value)
            node.Left = AddRecursive(node.Left, value);
        else if (value > node.Value)
            node.Right = AddRecursive(node.Right, value);

        return node;
    }

    public bool Contains(int value)
    {
        return ContainsRecursive(_root, value);
    }

    private bool ContainsRecursive(TreeNode node, int value)
    {
        if (node == null)
            return false;

        if (value == node.Value)
            return true;
        else if (value < node.Value)
            return ContainsRecursive(node.Left, value);
        else
            return ContainsRecursive(node.Right, value);
    }

    public void Clear()
    {
        _root = null;
        _count = 0;
    }

    public int[] ToArray()
    {
        int[] result = new int[_count];
        int index = 0;
        TraverseInOrder(_root, ref result, ref index);
        return result;
    }

    private void TraverseInOrder(TreeNode node, ref int[] array, ref int index)
    {
        if (node != null)
        {
            TraverseInOrder(node.Left, ref array, ref index);
            array[index++] = node.Value;
            TraverseInOrder(node.Right, ref array, ref index);
        }
    }
}
